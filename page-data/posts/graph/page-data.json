{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/graph","result":{"data":{"markdownRemark":{"id":"5e596d4e-68f0-5e78-bc1e-3bc1fa258f98","html":"<h3 id=\"graphs\" style=\"position:relative;\"><a href=\"#graphs\" aria-label=\"graphs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graphs</h3>\n<p>객체의 일부 쌍들이 ‘연관되어’ 있는 객체 집합 구조</p>\n<ul>\n<li>Topology(위상수학): 연속변환에 대해 불변인 기하학적 객체의 특성을 연구함</li>\n<li>Hamiltonian Cycle: 최단거리(외판원문제)</li>\n</ul>\n<h2 id=\"definition\" style=\"position:relative;\"><a href=\"#definition\" aria-label=\"definition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definition</h2>\n<ul>\n<li>세순서쌍 (V(G), E(G), psi_G)</li>\n<li>\n<p>psi: 접속 함수(incidence funcction), unordered 정점쌍에 대응한다.</p>\n<ul>\n<li>{{u, v}| u → V(G), v → V(G)}</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ψ</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>u</mi><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">\\psi(e) =uv</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">uv</span></span></span></span> edge e는 정점 u, v 를 연결하고 양 끝점으로 갖는다.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ν</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\nu(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.06366em;\">ν</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span> (nu, 누) 정점의 개수→order(차수)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\epsilon(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span> (epsilon, 입실론) 간선 개수→size(크기)</li>\n</ul>\n</li>\n<li>walk: graph 에서 정점과 에지가 번갈아 등장하는 하나의 열\n시작 정점과 끝 정점이 동일한 워크 → 닫힌 웥크 (closed walk)</li>\n<li>trail: 에지가 중복되지 않는 워크\n정점과 에지가 중복되지않는 닫힌 트레일 → 사이클 (cycle)</li>\n<li>path: 정점이 중복되지 않는 워크</li>\n<li>이분 그래프 (Bipartite Graph) → 길이가 홀수인 사이클이 존재하지 않는다</li>\n</ul>\n<h2 id=\"undirected-graph\" style=\"position:relative;\"><a href=\"#undirected-graph\" aria-label=\"undirected graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undirected Graph</h2>\n<p>(무방향) Graph G=(V, E)\nV: 노드(node) 혹은 정점(vertex)\nE: 노드쌍을 연결하는 에지(edge) 혹은 링크(link)\nobject 들 간의 이진관계</p>\n<h2 id=\"directed-graph\" style=\"position:relative;\"><a href=\"#directed-graph\" aria-label=\"directed graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directed Graph</h2>\n<p>(Directed) Graph G=(V, E)\nedge 는 방향을 가짐\n(Weighted) Graph\nedge 마다 가중치가 지정\nWeighted Graph\nAdjacency matrix</p>\n<h2 id=\"bfs-breath-너비-우선탐색\" style=\"position:relative;\"><a href=\"#bfs-breath-%EB%84%88%EB%B9%84-%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89\" aria-label=\"bfs breath 너비 우선탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS (Breath) 너비 우선탐색</h2>\n<p>BT level order traversal</p>\n<ul>\n<li>큐 (다익스트라 알고리즘에 사용됨 - 최단거리)</li>\n<li>It starts at the tree root</li>\n<li>explorers all of the neighbor nodes at the present depth</li>\n<li>moves on to the next depth level</li>\n<li>queue (방문 차례의 기록을 목적으로 사용)</li>\n<li>array (방문 정보의 기록을 목적으로 사용)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span> the queue <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">empty</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">remove</span> a node v <span class=\"token keyword\">from</span> queue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// start with start node</span>\n\t<span class=\"token keyword\">foreach</span> w <span class=\"token keyword\">in</span> <span class=\"token keyword\">unchecked</span> neighbour of v\n\t\tcheck w <span class=\"token keyword\">and</span> insert w <span class=\"token keyword\">into</span> queue <span class=\"token comment\">// insert all of the neighbor nodes at the present depth</span></code></pre></div>\n<h2 id=\"dfs-depth-깊이-우선탐색\" style=\"position:relative;\"><a href=\"#dfs-depth-%EA%B9%8A%EC%9D%B4-%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89\" aria-label=\"dfs depth 깊이 우선탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DFS (Depth) 깊이 우선탐색</h2>\n<p>BT inorder/preorder/postorder traversal</p>\n<ul>\n<li>스택으로 구현 (+ 재귀)</li>\n<li>It starts from an arbitrary node</li>\n<li>explores as far as possible along each branch before backtracking.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n\tvisited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">true</span>\n\t<span class=\"token keyword\">foreach</span> u adjacent node <span class=\"token keyword\">from</span> v <span class=\"token keyword\">do</span>\n\t\t<span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token return-type class-name\">false</span>\n\t\t\t<span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n\tend<span class=\"token punctuation\">.</span>\nend<span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>그래프가 disconnected 이거나 혹은 방향 그래프라면 DFS에 의해서 모든 노드가 방문되지 않을 수도 있음</li>\n<li>DFS를 반복하여 모든 노드 방문</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">DFS<span class=\"token operator\">-</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t\tvisited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> No\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> No<span class=\"token punctuation\">)</span> <span class=\"token return-type class-name\">then</span>\n\t\t\t<span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dag-directed-acyclic-graph\" style=\"position:relative;\"><a href=\"#dag-directed-acyclic-graph\" aria-label=\"dag directed acyclic graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DAG (Directed Acyclic Graph)</h2>\n<ul>\n<li>방향 사이클이 없는 방향 그래프</li>\n<li>outdegree 가 없는 node 부터 마킹됨</li>\n<li>예: 작업들의 우선순위</li>\n</ul>\n<h3 id=\"topological-ordering-위상정렬\" style=\"position:relative;\"><a href=\"#topological-ordering-%EC%9C%84%EC%83%81%EC%A0%95%EB%A0%AC\" aria-label=\"topological ordering 위상정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Topological Ordering (위상정렬)</h3>\n<ul>\n<li>a directed graph is a linear ordering of its vertices such that for every directed edge uv (from vertex u to vertex v)</li>\n<li>모든 에지 (Vi, Vj) 에 대해서 i&#x3C;j</li>\n<li>indegree: the number of edge incoming to the node</li>\n<li>outdegree: the number of edge outgoing from the node</li>\n<li>incoming → vertex(node) → outgoing</li>\n<li>indegree = 0 인 노드가 존재하지 않는다면? ⇒ topologicalSort_2 algorithm</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Algorithm #1</span>\n<span class=\"token comment\">// 첫 번째 노드를 먼저 찾음 또는 incoming edge 가 없는 노드</span>\n<span class=\"token comment\">// 1. Find Indgree == 0</span>\n<span class=\"token comment\">// 2. Remove the vertex and edges from Graph or inset it to an Array A[]</span>\n<span class=\"token comment\">// Repeat 1-2</span>\n\n<span class=\"token function\">topologicalSort_1</span><span class=\"token punctuation\">(</span>Graph<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token number\">1</span> <span class=\"token return-type class-name\">to</span> n\n\t<span class=\"token punctuation\">{</span>\n\t\t\tu <span class=\"token operator\">=</span> incomingEdge <span class=\"token punctuation\">(</span>indgree <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n\t\t\tRemove u <span class=\"token keyword\">and</span> outgoing nodes<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Algorithm #2</span>\n<span class=\"token comment\">// 마지막 노드를 먼저 찾음 또는 outgoing edge 가 없는 노드</span>\n\n<span class=\"token function\">topologicalSort_2</span><span class=\"token punctuation\">(</span>Graph<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t<span class=\"token punctuation\">{</span>\n\t\t\tvisited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> NO<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tmake an empty linked <span class=\"token class-name\">list</span> R<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> NO<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\tDFS<span class=\"token operator\">-</span><span class=\"token function\">TS</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nDFS<span class=\"token operator\">-</span><span class=\"token function\">TS</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t\tvisited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> No\n\t<span class=\"token keyword\">foreach</span> u <span class=\"token keyword\">in</span> v\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> No<span class=\"token punctuation\">)</span> then\n\t\t\tDFS<span class=\"token operator\">-</span>TS<span class=\"token return-type class-name\"><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span></span>\n\tR<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"bipartite-graph-이분-그래프\" style=\"position:relative;\"><a href=\"#bipartite-graph-%EC%9D%B4%EB%B6%84-%EA%B7%B8%EB%9E%98%ED%94%84\" aria-label=\"bipartite graph 이분 그래프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bipartite Graph (이분 그래프)</h2>\n<ul>\n<li>vertices can be divided into two disjoint (그래프의 모든 정점이 두 그룹으로 나누어짐)</li>\n<li>every edge connects a vertex in U to one in V, coloring of the graph with two colors.</li>\n<li>not contain any odd-length cycles.</li>\n<li>인접한 정점끼리 서로 다른 색으로 칠해서 모든 정점을 두 가지 색으로만 칠할 수 있는 그래프</li>\n</ul>\n<h3 id=\"이분-그래프-확인-bfs-dfs\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B6%84-%EA%B7%B8%EB%9E%98%ED%94%84-%ED%99%95%EC%9D%B8-bfs-dfs\" aria-label=\"이분 그래프 확인 bfs dfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이분 그래프 확인 (BFS, DFS)</h3>\n<ul>\n<li>탐색하면서 정점을 방문할 때 마다 두가지 색 중 하나로 칠함</li>\n<li>인접한 정점은 자신과 다른 색으로 칠한다.</li>\n<li>인접한 정점이 같은 색이면 안됨</li>\n</ul>","fields":{"slug":"/posts/graph","tagSlugs":["/tag/graph/","/tag/algorithm/","/tag/dfs/","/tag/bfs/"]},"frontmatter":{"date":"2021-04-20T21:09:02.284Z","description":"Graph","tags":["Graph","Algorithm","DFS","BFS"],"title":"Graph Algorithm","socialImage":null}}},"pageContext":{"slug":"/posts/graph"}},"staticQueryHashes":["251939775","401334301","825871152"]}